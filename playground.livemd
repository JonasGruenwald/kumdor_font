<!-- livebook:{"persist_outputs":true} -->

# Playground

```elixir
project_path = Path.absname(__DIR__)

Mix.install([
  {:evision, "~> 0.2"},
  {:kumdor_font, path: __DIR__},
  {:kino, "~> 0.13.0"}
])

Mix.install_project_dir()

# I have the repo https://github.com/lynn/kumdor cloned
# in an adjascent path
rom_path =
  Path.join([project_path, "..", "kumdor", "saved.hdm"])
  |> Path.expand()
```

## Reading the Binary

In this section I am just experimenting with how to read the font data from the binary.

From: https://github.com/lynn/kumdor/blob/master/patch.py

```python
# Use a nicer apostrophe glyph:
font_data = rom[0x12000:0x12800]
apostrophe = rom[0x12270:0x12280]
write(0x12270, b"\0\0\0\x18\x18\x08\x10\0\0\0\0\0\0\0\0\0")
```

Each character is 0x10 = 16 bytes, where each byte is a row of the character. The apostrophe is 0x27 in ASCII, so it starts at 0x12270 in the ROM.

```elixir
# I'm using this version of the rom: 
# https://github.com/lynn/kumdor/blob/master/saved.hdm
data = File.read!(rom_path)

# Match the part of the binary that contains the font data
<<_::binary-size(0x12000), font_section::binary-size(0x800), _::binary>> = data

# Match the character A (capital), which is 0x41 in ASCII
<<_::binary-size(0x41 * 0x10), character_section::binary-size(0x10), _::binary>> = font_section

byte_rows = for <<r::8 <- character_section>>, do: <<r>>

# log byte rows as they are
byte_rows
|> Enum.each(fn row ->
  for <<b::1 <- row>> do
    case b do
      0 -> "░"
      1 -> "█"
    end
  end
  |> Enum.join()
  |> IO.inspect()
end)

# the output is the individual bits representing the 'A' character
```

<!-- livebook:{"output":true} -->

```
"░░░░░░░░"
"░░░░░░░░"
"░░░░█░░░"
"░░░█░█░░"
"░░░█░█░░"
"░░░█░█░░"
"░░█░░░█░"
"░░█░░░█░"
"░░█░░░█░"
"░░█████░"
"░█░░░░░█"
"░█░░░░░█"
"░█░░░░░█"
"░█░░░░░█"
"░░░░░░░░"
"░░░░░░░░"
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Extracting to Image

In this section I'm experimenting with how to turn the extracted font data into an image that can be saved to disk.

I'm using OpenCV since it's the most straightforward way I can possibly think of in Elixir, although it seems a bit overkill.

```elixir
# Try to get the binary data into the format OpenCV can work with
chunks = FontExtractor.get_character_table(data)
{_idx, character_section} = Enum.at(chunks, 0x41)

for <<r::8 <- character_section>> do
  <<r>>
end
|> Enum.map(fn row ->
  for <<b::1 <- row>> do
    case b do
      0 -> <<255>>
      1 -> <<0>>
    end
  end
end)
|> List.flatten()
|> Enum.reduce(fn i, acc ->
  acc <> i
end)
|> Evision.Mat.from_binary({:u, 8}, 16, 8, 1)
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 1,
  dims: 2,
  type: {:u, 8},
  raw_type: 0,
  shape: {16, 8},
  ref: #Reference<0.4227438417.1567752216.239998>
}
```

```elixir
# Cleaned up version of the above cell
{_idx, character_section} = Enum.at(chunks, 0x25)
FontExtractor.character_to_mat(character_section)
```

<!-- livebook:{"output":true} -->

```
%Evision.Mat{
  channels: 1,
  dims: 2,
  type: {:u, 8},
  raw_type: 0,
  shape: {16, 8},
  ref: #Reference<0.4227438417.1567752216.240001>
}
```

## Converting to BDF

```elixir
# let's take the previous character
# and try to encoded its bitmap into the format
# expected by BDF

for <<r::8 <- character_section>> do
  Base.encode16(<<r>>)
end
|> Enum.join("\n")
```

<!-- livebook:{"output":true} -->

```
"00\n00\n30\n49\n4A\n4A\n34\n08\n08\n16\n29\n29\n49\n06\n00\n00"
```

```elixir
# Inspect body export
font_body =
  chunks
  |> Enum.map(fn {index, data} ->
    BdfExporter.gen_char(index, data)
  end)
  |> Enum.join("")

File.write!(Path.join(project_path, "test.bdf"), font_body)
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
# Inspect full export
output = BdfExporter.from_char_table(chunks)

File.write!(Path.join(project_path, "test2.bdf"), output)
```

<!-- livebook:{"output":true} -->

```
:ok
```
