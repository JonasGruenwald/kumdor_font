defmodule BdfExporter do
  @moduledoc """
  This module generates a Glyph Bitmap Distribution Format (BDF) file
  for a bitmap font.

  The BDF spec is detailed here:
  https://adobe-type-tools.github.io/font-tech-notes/pdfs/5005.BDF_Spec.pdf

  Notes:
  - we use 2.1 of the spec, not 2.2
  - we use unicode names for the characters

  As a reference I also looked at this font, which has the same dimensions as ours:
  https://code.lag.net/robey/font-problems/src/branch/main/fonts/bizcat.bdf
  """


    @doc """
  Take a character table as generated by
  `FontExtractor.get_character_table`
  and return a BDF file as a string.
  """
  def from_char_table(table) do
    font_head = gen_font_head(char_count: length(table))
    font_tail = gen_font_tail()

    char_defs = Enum.map(table, fn {index, data} ->
      gen_char(index, data)
    end)

    font_head <> Enum.join(char_defs) <> font_tail
  end

  @doc """
  Generate the start of the BDF file, this includes the global font information
  specificed in 3.1 of the BDF spec.
  """
  def gen_font_head(options \\ []) do
    font_version = Keyword.get(options, :font_version, "1.0")
    font_name = Keyword.get(options, :font_name, "kumdor_latin.bdf")
    font_width = Keyword.get(options, :font_width, 8)
    font_height = Keyword.get(options, :font_height, 16)
    target_resolution = Keyword.get(options, :target_resolution, 75)
    char_count = Keyword.get(options, :char_count, 128)

    """
    STARTFONT 2.1
    COMMENT generated by https://github.com/JonasGruenwald/kumdor_font
    CONTENTVERSION #{font_version}
    FONT #{font_name}
    SIZE #{font_height} #{target_resolution}
    FONTBOUNDINGBOX #{font_width} #{font_height} 0 0
    STARTPROPERTIES 9
    FAMILY_NAME "#{font_name}"
    COPYRIGHT ""
    PIXEL_SIZE #{font_height}
    RESOLUTION_X 72
    RESOLUTION_Y 72
    CHARSET_REGISTRY "ISO10646"
    CHARSET_ENCODING "1"
    FONT_ASCENT #{font_height}
    FONT_DESCENT 0
    ENDPROPERTIES
    CHARS #{char_count}
    """
  end

  @doc """
  Generate the character definition for a character.
  `name` is the unicode name of the character.
  `encoding` is the Adobe Standard Encoding value.
  """
  def gen_char(index, data, options \\ []) do
    font_width = Keyword.get(options, :font_width, 8)
    font_height = Keyword.get(options, :font_height, 16)
    name = "U+000" <> Base.encode16(<<index>>)
    encoding = index
    """
    STARTCHAR #{name}
    ENCODING #{encoding}
    SWIDTH 500 0
    DWIDTH #{font_width} 0
    BBX #{font_width} #{font_height} 0 0
    BITMAP
    #{encode_char_data(data)}
    ENDCHAR
    """
  end

  defp encode_char_data(character) do
    for <<r::8 <- character>> do
      Base.encode16(<<r>>)
    end
    |> Enum.join("\n")
  end

  @doc """
  Generate the end of the BDF file.
  """
  def gen_font_tail do
    """
    ENDFONT
    """
  end
end
